'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const formats_1 = __importDefault(require("../formats"));
const checkLines_1 = __importDefault(require("./checkLines"));
const parsers_1 = require("./parsers");
function parseMRZ(lines) {
    const result = (0, checkLines_1.default)(lines);
    switch (result.length) {
        case 2:
        case 3: {
            switch (result[0].length) {
                case 30:
                    return parsers_1.parsers.td1(lines);
                case 36: {
                    const endLine1 = lines[0].substr(30, 36);
                    if (endLine1.match(/[0-9]/)) {
                        return parsers_1.parsers.frenchNationalId(lines);
                    }
                    else {
                        return parsers_1.parsers.td2(lines);
                    }
                }
                case 44:
                    return parsers_1.parsers.td3(lines);
                case 9:
                    return parsers_1.parsers.swissDrivingLicense(lines);
                default:
                    throw new Error('unrecognized document format. First line of input must have 30 (TD1), 36 (TD2 or French National Id), 44 (TD3) or 9 (Swiss Driving License) characters');
            }
        }
        default:
            throw new Error(`unrecognized document format. Input must have two or three lines, found${lines.length}`);
    }
}
for (const format in formats_1.default) {
    parseMRZ[format] = parsers_1.parsers[format];
}
exports.default = parseMRZ;
//# sourceMappingURL=parse.js.map