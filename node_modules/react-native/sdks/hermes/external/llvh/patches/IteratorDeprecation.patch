diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/BreadthFirstIterator.h b/xplat/hermes/external/llvh/include/llvh/ADT/BreadthFirstIterator.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/BreadthFirstIterator.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/BreadthFirstIterator.h
@@ -45,10 +45,13 @@
           class SetType =
               bf_iterator_default_set<typename GraphTraits<GraphT>::NodeRef>,
           class GT = GraphTraits<GraphT>>
-class bf_iterator
-    : public std::iterator<std::forward_iterator_tag, typename GT::NodeRef>,
-      public bf_iterator_storage<SetType> {
-  using super = std::iterator<std::forward_iterator_tag, typename GT::NodeRef>;
+class bf_iterator : public bf_iterator_storage<SetType> {
+public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = typename GT::NodeRef;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;

   using NodeRef = typename GT::NodeRef;
   using ChildItTy = typename GT::ChildIteratorType;
@@ -108,8 +111,6 @@
   }

 public:
-  using pointer = typename super::pointer;
-
   // Provide static begin and end methods as our public "constructors"
   static bf_iterator begin(const GraphT &G) {
     return bf_iterator(GT::getEntryNode(G));
diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/DepthFirstIterator.h b/xplat/hermes/external/llvh/include/llvh/ADT/DepthFirstIterator.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/DepthFirstIterator.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/DepthFirstIterator.h
@@ -83,10 +83,15 @@
           class SetType =
               df_iterator_default_set<typename GraphTraits<GraphT>::NodeRef>,
           bool ExtStorage = false, class GT = GraphTraits<GraphT>>
-class df_iterator
-    : public std::iterator<std::forward_iterator_tag, typename GT::NodeRef>,
-      public df_iterator_storage<SetType, ExtStorage> {
-  using super = std::iterator<std::forward_iterator_tag, typename GT::NodeRef>;
+class df_iterator : public df_iterator_storage<SetType, ExtStorage> {
+public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = typename GT::NodeRef;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
+private:
   using NodeRef = typename GT::NodeRef;
   using ChildItTy = typename GT::ChildIteratorType;

@@ -145,8 +150,6 @@
   }

 public:
-  using pointer = typename super::pointer;
-
   // Provide static begin and end methods as our public "constructors"
   static df_iterator begin(const GraphT &G) {
     return df_iterator(GT::getEntryNode(G));
diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/EquivalenceClasses.h b/xplat/hermes/external/llvh/include/llvh/ADT/EquivalenceClasses.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/EquivalenceClasses.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/EquivalenceClasses.h
@@ -249,19 +249,18 @@
     return It != member_end() && It == findLeader(V2);
   }

-  class member_iterator : public std::iterator<std::forward_iterator_tag,
-                                               const ElemTy, ptrdiff_t> {
+  class member_iterator {
     friend class EquivalenceClasses;

-    using super = std::iterator<std::forward_iterator_tag,
-                                const ElemTy, ptrdiff_t>;
-
     const ECValue *Node;

   public:
-    using size_type = size_t;
-    using pointer = typename super::pointer;
-    using reference = typename super::reference;
+    using iterator_category = std::forward_iterator_tag;
+    using value_type = const ElemTy;
+    using size_type = std::size_t;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;

     explicit member_iterator() = default;
     explicit member_iterator(const ECValue *N) : Node(N) {}
diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/ImmutableSet.h b/xplat/hermes/external/llvh/include/llvh/ADT/ImmutableSet.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/ImmutableSet.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/ImmutableSet.h
@@ -646,13 +646,16 @@
 // Immutable AVL-Tree Iterators.
 //===----------------------------------------------------------------------===//

-template <typename ImutInfo>
-class ImutAVLTreeGenericIterator
-    : public std::iterator<std::bidirectional_iterator_tag,
-                           ImutAVLTree<ImutInfo>> {
+template <typename ImutInfo> class ImutAVLTreeGenericIterator {
   SmallVector<uintptr_t,20> stack;

 public:
+  using iterator_category = std::bidirectional_iterator_tag;
+  using value_type = ImutAVLTree<ImutInfo>;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
   enum VisitFlag { VisitedNone=0x0, VisitedLeft=0x1, VisitedRight=0x3,
                    Flags=0x3 };

@@ -757,15 +760,18 @@
   }
 };

-template <typename ImutInfo>
-class ImutAVLTreeInOrderIterator
-    : public std::iterator<std::bidirectional_iterator_tag,
-                           ImutAVLTree<ImutInfo>> {
+template <typename ImutInfo> class ImutAVLTreeInOrderIterator {
   using InternalIteratorTy = ImutAVLTreeGenericIterator<ImutInfo>;

   InternalIteratorTy InternalItr;

 public:
+  using iterator_category = std::bidirectional_iterator_tag;
+  using value_type = ImutAVLTree<ImutInfo>;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
   using TreeTy = ImutAVLTree<ImutInfo>;

   ImutAVLTreeInOrderIterator(const TreeTy* Root) : InternalItr(Root) {
diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/IntervalMap.h b/xplat/hermes/external/llvh/include/llvh/ADT/IntervalMap.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/IntervalMap.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/IntervalMap.h
@@ -64,9 +64,13 @@
 // };
 //
 // template <typename KeyT, typename ValT, unsigned N, typename Traits>
-// class IntervalMap::const_iterator :
-//   public std::iterator<std::bidirectional_iterator_tag, ValT> {
+// class IntervalMap::const_iterator {
 // public:
+//   using iterator_category = std::bidirectional_iterator_tag;
+//   using value_type = ValT;
+//   using difference_type = std::ptrdiff_t;
+//   using pointer = value_type *;
+//   using reference = value_type &;
 //   bool operator==(const const_iterator &) const;
 //   bool operator!=(const const_iterator &) const;
 //   bool valid() const;
@@ -1280,12 +1284,17 @@
 //===----------------------------------------------------------------------===//

 template <typename KeyT, typename ValT, unsigned N, typename Traits>
-class IntervalMap<KeyT, ValT, N, Traits>::const_iterator :
-  public std::iterator<std::bidirectional_iterator_tag, ValT> {
-
-protected:
+class IntervalMap<KeyT, ValT, N, Traits>::const_iterator {
   friend class IntervalMap;

+public:
+  using iterator_category = std::bidirectional_iterator_tag;
+  using value_type = ValT;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
+protected:
   // The map referred to.
   IntervalMap *map = nullptr;

diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/PostOrderIterator.h b/xplat/hermes/external/llvh/include/llvh/ADT/PostOrderIterator.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/PostOrderIterator.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/PostOrderIterator.h
@@ -93,10 +93,15 @@
           class SetType =
               SmallPtrSet<typename GraphTraits<GraphT>::NodeRef, 8>,
           bool ExtStorage = false, class GT = GraphTraits<GraphT>>
-class po_iterator
-    : public std::iterator<std::forward_iterator_tag, typename GT::NodeRef>,
-      public po_iterator_storage<SetType, ExtStorage> {
-  using super = std::iterator<std::forward_iterator_tag, typename GT::NodeRef>;
+class po_iterator : public po_iterator_storage<SetType, ExtStorage> {
+public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = typename GT::NodeRef;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
+private:
   using NodeRef = typename GT::NodeRef;
   using ChildItTy = typename GT::ChildIteratorType;

@@ -135,8 +140,6 @@
   }

 public:
-  using pointer = typename super::pointer;
-
   // Provide static "constructors"...
   static po_iterator begin(GraphT G) {
     return po_iterator(GT::getEntryNode(G));
diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/SparseMultiSet.h b/xplat/hermes/external/llvh/include/llvh/ADT/SparseMultiSet.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/SparseMultiSet.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/SparseMultiSet.h
@@ -217,11 +217,17 @@

   /// Our iterators are iterators over the collection of objects that share a
   /// key.
-  template<typename SMSPtrTy>
-  class iterator_base : public std::iterator<std::bidirectional_iterator_tag,
-                                             ValueT> {
+  template <typename SMSPtrTy> class iterator_base {
     friend class SparseMultiSet;

+  public:
+    using iterator_category = std::bidirectional_iterator_tag;
+    using value_type = ValueT;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
+  private:
     SMSPtrTy SMS;
     unsigned Idx;
     unsigned SparseIdx;
@@ -248,12 +254,6 @@
     void setNext(unsigned N) { SMS->Dense[Idx].Next = N; }

   public:
-    using super = std::iterator<std::bidirectional_iterator_tag, ValueT>;
-    using value_type = typename super::value_type;
-    using difference_type = typename super::difference_type;
-    using pointer = typename super::pointer;
-    using reference = typename super::reference;
-
     reference operator*() const {
       assert(isKeyed() && SMS->sparseIndex(SMS->Dense[Idx].Data) == SparseIdx &&
              "Dereferencing iterator of invalid key or index");
diff --git a/xplat/hermes/external/llvh/include/llvh/ADT/iterator.h b/xplat/hermes/external/llvh/include/llvh/ADT/iterator.h
--- a/xplat/hermes/external/llvh/include/llvh/ADT/iterator.h
+++ b/xplat/hermes/external/llvh/include/llvh/ADT/iterator.h
@@ -65,9 +65,14 @@
 template <typename DerivedT, typename IteratorCategoryT, typename T,
           typename DifferenceTypeT = std::ptrdiff_t, typename PointerT = T *,
           typename ReferenceT = T &>
-class iterator_facade_base
-    : public std::iterator<IteratorCategoryT, T, DifferenceTypeT, PointerT,
-                           ReferenceT> {
+class iterator_facade_base {
+public:
+  using iterator_category = IteratorCategoryT;
+  using value_type = T;
+  using difference_type = DifferenceTypeT;
+  using pointer = PointerT;
+  using reference = ReferenceT;
+
 protected:
   enum {
     IsRandomAccess = std::is_base_of<std::random_access_iterator_tag,
diff --git a/xplat/hermes/external/llvh/include/llvh/IR/CFG.h b/xplat/hermes/external/llvh/include/llvh/IR/CFG.h
--- a/xplat/hermes/external/llvh/include/llvh/IR/CFG.h
+++ b/xplat/hermes/external/llvh/include/llvh/IR/CFG.h
@@ -40,10 +40,15 @@
 //===----------------------------------------------------------------------===//

 template <class Ptr, class USE_iterator> // Predecessor Iterator
-class PredIterator : public std::iterator<std::forward_iterator_tag,
-                                          Ptr, ptrdiff_t, Ptr*, Ptr*> {
-  using super =
-      std::iterator<std::forward_iterator_tag, Ptr, ptrdiff_t, Ptr*, Ptr*>;
+class PredIterator {
+public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = Ptr;
+  using difference_type = std::ptrdiff_t;
+  using pointer = Ptr *;
+  using reference = Ptr *;
+
+private:
   using Self = PredIterator<Ptr, USE_iterator>;
   USE_iterator It;

@@ -59,9 +64,6 @@
   }

 public:
-  using pointer = typename super::pointer;
-  using reference = typename super::reference;
-
   PredIterator() = default;
   explicit inline PredIterator(Ptr *bb) : It(bb->user_begin()) {
     advancePastNonTerminators();
diff --git a/xplat/hermes/external/llvh/include/llvh/IR/DebugInfoMetadata.h b/xplat/hermes/external/llvh/include/llvh/IR/DebugInfoMetadata.h
--- a/xplat/hermes/external/llvh/include/llvh/IR/DebugInfoMetadata.h
+++ b/xplat/hermes/external/llvh/include/llvh/IR/DebugInfoMetadata.h
@@ -117,11 +117,16 @@
   unsigned size() const { return N ? N->getNumOperands() : 0u; }
   DITypeRef operator[](unsigned I) const { return DITypeRef(N->getOperand(I)); }

-  class iterator : std::iterator<std::input_iterator_tag, DITypeRef,
-                                 std::ptrdiff_t, void, DITypeRef> {
+  class iterator {
     MDNode::op_iterator I = nullptr;

   public:
+    using iterator_category = std::input_iterator_tag;
+    using value_type = DIType *;
+    using difference_type = std::ptrdiff_t;
+    using pointer = void;
+    using reference = DIType *;
+
     iterator() = default;
     explicit iterator(MDNode::op_iterator I) : I(I) {}

@@ -2356,11 +2361,16 @@
   };

   /// An iterator for expression operands.
-  class expr_op_iterator
-      : public std::iterator<std::input_iterator_tag, ExprOperand> {
+  class expr_op_iterator {
     ExprOperand Op;

   public:
+    using iterator_category = std::input_iterator_tag;
+    using value_type = ExprOperand;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
     expr_op_iterator() = default;
     explicit expr_op_iterator(element_iterator I) : Op(I) {}

diff --git a/xplat/hermes/external/llvh/include/llvh/IR/GetElementPtrTypeIterator.h b/xplat/hermes/external/llvh/include/llvh/IR/GetElementPtrTypeIterator.h
--- a/xplat/hermes/external/llvh/include/llvh/IR/GetElementPtrTypeIterator.h
+++ b/xplat/hermes/external/llvh/include/llvh/IR/GetElementPtrTypeIterator.h
@@ -28,19 +28,21 @@

 namespace llvh {

-  template<typename ItTy = User::const_op_iterator>
-  class generic_gep_type_iterator
-    : public std::iterator<std::forward_iterator_tag, Type *, ptrdiff_t> {
-    using super = std::iterator<std::forward_iterator_tag, Type *, ptrdiff_t>;
+  template <typename ItTy = User::const_op_iterator>
+  class generic_gep_type_iterator {

     ItTy OpIt;
     PointerUnion<StructType *, Type *> CurTy;
-    enum : uint64_t { Unbounded = -1ull };
-    uint64_t NumElements = Unbounded;

     generic_gep_type_iterator() = default;

   public:
+    using iterator_category = std::forward_iterator_tag;
+    using value_type = Type *;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
     static generic_gep_type_iterator begin(Type *Ty, ItTy It) {
       generic_gep_type_iterator I;
       I.CurTy = Ty;
@@ -48,12 +50,6 @@
       return I;
     }

-    static generic_gep_type_iterator end(ItTy It) {
-      generic_gep_type_iterator I;
-      I.OpIt = It;
-      return I;
-    }
-
     bool operator==(const generic_gep_type_iterator& x) const {
       return OpIt == x.OpIt;
     }
diff --git a/xplat/hermes/external/llvh/include/llvh/IR/Metadata.h b/xplat/hermes/external/llvh/include/llvh/IR/Metadata.h
--- a/xplat/hermes/external/llvh/include/llvh/IR/Metadata.h
+++ b/xplat/hermes/external/llvh/include/llvh/IR/Metadata.h
@@ -1188,13 +1188,16 @@
 ///
 /// An iterator that transforms an \a MDNode::iterator into an iterator over a
 /// particular Metadata subclass.
-template <class T>
-class TypedMDOperandIterator
-    : public std::iterator<std::input_iterator_tag, T *, std::ptrdiff_t, void,
-                           T *> {
+template <class T> class TypedMDOperandIterator {
   MDNode::op_iterator I = nullptr;

 public:
+  using iterator_category = std::input_iterator_tag;
+  using value_type = T *;
+  using difference_type = std::ptrdiff_t;
+  using pointer = void;
+  using reference = T *;
+
   TypedMDOperandIterator() = default;
   explicit TypedMDOperandIterator(MDNode::op_iterator I) : I(I) {}

@@ -1335,9 +1338,7 @@

   explicit NamedMDNode(const Twine &N);

-  template<class T1, class T2>
-  class op_iterator_impl :
-      public std::iterator<std::bidirectional_iterator_tag, T2> {
+  template <class T1, class T2> class op_iterator_impl {
     friend class NamedMDNode;

     const NamedMDNode *Node = nullptr;
@@ -1346,6 +1347,12 @@
     op_iterator_impl(const NamedMDNode *N, unsigned i) : Node(N), Idx(i) {}

   public:
+    using iterator_category = std::bidirectional_iterator_tag;
+    using value_type = T2;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
     op_iterator_impl() = default;

     bool operator==(const op_iterator_impl &o) const { return Idx == o.Idx; }
diff --git a/xplat/hermes/external/llvh/include/llvh/IR/Module.h b/xplat/hermes/external/llvh/include/llvh/IR/Module.h
--- a/xplat/hermes/external/llvh/include/llvh/IR/Module.h
+++ b/xplat/hermes/external/llvh/include/llvh/IR/Module.h
@@ -715,14 +715,19 @@
   }

   /// An iterator for DICompileUnits that skips those marked NoDebug.
-  class debug_compile_units_iterator
-      : public std::iterator<std::input_iterator_tag, DICompileUnit *> {
+  class debug_compile_units_iterator {
     NamedMDNode *CUs;
     unsigned Idx;

     void SkipNoDebugCUs();

   public:
+    using iterator_category = std::input_iterator_tag;
+    using value_type = DICompileUnit *;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
     explicit debug_compile_units_iterator(NamedMDNode *CUs, unsigned Idx)
         : CUs(CUs), Idx(Idx) {
       SkipNoDebugCUs();
diff --git a/xplat/hermes/external/llvh/include/llvh/IR/Value.h b/xplat/hermes/external/llvh/include/llvh/IR/Value.h
--- a/xplat/hermes/external/llvh/include/llvh/IR/Value.h
+++ b/xplat/hermes/external/llvh/include/llvh/IR/Value.h
@@ -122,8 +122,7 @@

 private:
   template <typename UseT> // UseT == 'Use' or 'const Use'
-  class use_iterator_impl
-      : public std::iterator<std::forward_iterator_tag, UseT *> {
+  class use_iterator_impl {
     friend class Value;

     UseT *U;
@@ -131,6 +130,12 @@
     explicit use_iterator_impl(UseT *u) : U(u) {}

   public:
+    using iterator_category = std::forward_iterator_tag;
+    using value_type = UseT *;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
     use_iterator_impl() : U() {}

     bool operator==(const use_iterator_impl &x) const { return U == x.U; }
@@ -161,13 +166,18 @@
   };

   template <typename UserTy> // UserTy == 'User' or 'const User'
-  class user_iterator_impl
-      : public std::iterator<std::forward_iterator_tag, UserTy *> {
+  class user_iterator_impl {
     use_iterator_impl<Use> UI;
     explicit user_iterator_impl(Use *U) : UI(U) {}
     friend class Value;

   public:
+    using iterator_category = std::forward_iterator_tag;
+    using value_type = UserTy *;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
     user_iterator_impl() = default;

     bool operator==(const user_iterator_impl &x) const { return UI == x.UI; }
diff --git a/xplat/hermes/external/llvh/include/llvh/IR/ValueMap.h b/xplat/hermes/external/llvh/include/llvh/IR/ValueMap.h
--- a/xplat/hermes/external/llvh/include/llvh/IR/ValueMap.h
+++ b/xplat/hermes/external/llvh/include/llvh/IR/ValueMap.h
@@ -329,17 +329,19 @@
   }
 };

-template<typename DenseMapT, typename KeyT>
-class ValueMapIterator :
-    public std::iterator<std::forward_iterator_tag,
-                         std::pair<KeyT, typename DenseMapT::mapped_type>,
-                         ptrdiff_t> {
+template <typename DenseMapT, typename KeyT> class ValueMapIterator {
   using BaseT = typename DenseMapT::iterator;
   using ValueT = typename DenseMapT::mapped_type;

   BaseT I;

 public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = std::pair<KeyT, typename DenseMapT::mapped_type>;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
   ValueMapIterator() : I() {}
   ValueMapIterator(BaseT I) : I(I) {}

@@ -381,17 +383,19 @@
   }
 };

-template<typename DenseMapT, typename KeyT>
-class ValueMapConstIterator :
-    public std::iterator<std::forward_iterator_tag,
-                         std::pair<KeyT, typename DenseMapT::mapped_type>,
-                         ptrdiff_t> {
+template <typename DenseMapT, typename KeyT> class ValueMapConstIterator {
   using BaseT = typename DenseMapT::const_iterator;
   using ValueT = typename DenseMapT::mapped_type;

   BaseT I;

 public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = std::pair<KeyT, typename DenseMapT::mapped_type>;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
   ValueMapConstIterator() : I() {}
   ValueMapConstIterator(BaseT I) : I(I) {}
   ValueMapConstIterator(ValueMapIterator<DenseMapT, KeyT> Other)
diff --git a/xplat/hermes/external/llvh/include/llvh/Support/LineIterator.h b/xplat/hermes/external/llvh/include/llvh/Support/LineIterator.h
--- a/xplat/hermes/external/llvh/include/llvh/Support/LineIterator.h
+++ b/xplat/hermes/external/llvh/include/llvh/Support/LineIterator.h
@@ -29,8 +29,7 @@
 /// character.
 ///
 /// Note that this iterator requires the buffer to be nul terminated.
-class line_iterator
-    : public std::iterator<std::forward_iterator_tag, StringRef> {
+class line_iterator {
   const MemoryBuffer *Buffer;
   char CommentMarker;
   bool SkipBlanks;
@@ -39,6 +38,12 @@
   StringRef CurrentLine;

 public:
+  using iterator_category = std::forward_iterator_tag;
+  using value_type = StringRef;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
   /// Default construct an "end" iterator.
   line_iterator() : Buffer(nullptr) {}

diff --git a/xplat/hermes/external/llvh/include/llvh/Support/TargetRegistry.h b/xplat/hermes/external/llvh/include/llvh/Support/TargetRegistry.h
--- a/xplat/hermes/external/llvh/include/llvh/Support/TargetRegistry.h
+++ b/xplat/hermes/external/llvh/include/llvh/Support/TargetRegistry.h
@@ -592,8 +592,7 @@
   // function).
   TargetRegistry() = delete;

-  class iterator
-      : public std::iterator<std::forward_iterator_tag, Target, ptrdiff_t> {
+  class iterator {
     friend struct TargetRegistry;

     const Target *Current = nullptr;
@@ -601,6 +600,12 @@
     explicit iterator(Target *T) : Current(T) {}

   public:
+    using iterator_category = std::forward_iterator_tag;
+    using value_type = Target;
+    using difference_type = std::ptrdiff_t;
+    using pointer = value_type *;
+    using reference = value_type &;
+
     iterator() = default;

     bool operator==(const iterator &x) const { return Current == x.Current; }
diff --git a/xplat/hermes/external/llvh/include/llvh/Support/YAMLParser.h b/xplat/hermes/external/llvh/include/llvh/Support/YAMLParser.h
--- a/xplat/hermes/external/llvh/include/llvh/Support/YAMLParser.h
+++ b/xplat/hermes/external/llvh/include/llvh/Support/YAMLParser.h
@@ -321,9 +321,14 @@
 /// BaseT must have a ValueT* member named CurrentEntry and a member function
 /// increment() which must set CurrentEntry to 0 to create an end iterator.
 template <class BaseT, class ValueT>
-class basic_collection_iterator
-    : public std::iterator<std::input_iterator_tag, ValueT> {
+class basic_collection_iterator {
 public:
+  using iterator_category = std::input_iterator_tag;
+  using value_type = ValueT;
+  using difference_type = std::ptrdiff_t;
+  using pointer = value_type *;
+  using reference = value_type &;
+
   basic_collection_iterator() = default;
   basic_collection_iterator(BaseT *B) : Base(B) {}
