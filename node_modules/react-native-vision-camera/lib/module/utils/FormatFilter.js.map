{"version":3,"sources":["FormatFilter.ts"],"names":["Dimensions","sortDevices","left","right","leftPoints","rightPoints","leftHasWideAngle","devices","includes","rightHasWideAngle","leftHasTelephoto","rightHasTelephoto","length","SCREEN_SIZE","width","get","height","SCREEN_ASPECT_RATIO","sortFormats","Math","round","photoWidth","videoWidth","leftAspectRatioDiff","photoHeight","rightAspectRatioDiff","abs","frameRateIncluded","range","fps","minFrameRate","maxFrameRate"],"mappings":"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","sourcesContent":["import { Dimensions } from 'react-native';\nimport type { CameraDevice, CameraDeviceFormat, FrameRateRange } from '../CameraDevice';\n\n/**\n * Compares two devices by the following criteria:\n * * `wide-angle-camera`s are ranked higher than others\n * * Devices with more physical cameras are ranked higher than ones with less. (e.g. \"Triple Camera\" > \"Wide-Angle Camera\")\n *\n * > Note that this makes the `sort()` function descending, so the first element (`[0]`) is the \"best\" device.\n *\n * @example\n * ```ts\n * const devices = camera.devices.sort(sortDevices)\n * const bestDevice = devices[0]\n * ```\n * @method\n */\nexport const sortDevices = (left: CameraDevice, right: CameraDevice): number => {\n  let leftPoints = 0;\n  let rightPoints = 0;\n\n  const leftHasWideAngle = left.devices.includes('wide-angle-camera');\n  const rightHasWideAngle = right.devices.includes('wide-angle-camera');\n  if (leftHasWideAngle) leftPoints += 2;\n  if (rightHasWideAngle) rightPoints += 2;\n\n  // telephoto cameras often have very poor quality.\n  const leftHasTelephoto = left.devices.includes('telephoto-camera');\n  const rightHasTelephoto = right.devices.includes('telephoto-camera');\n  if (leftHasTelephoto) leftPoints -= 2;\n  if (rightHasTelephoto) rightPoints -= 2;\n\n  if (left.devices.length > right.devices.length) leftPoints += 1;\n  if (right.devices.length > left.devices.length) rightPoints += 1;\n\n  return rightPoints - leftPoints;\n};\n\nconst SCREEN_SIZE = {\n  width: Dimensions.get('window').width,\n  height: Dimensions.get('window').height,\n};\nconst SCREEN_ASPECT_RATIO = SCREEN_SIZE.width / SCREEN_SIZE.height;\n\n/**\n * Sort formats by resolution and aspect ratio difference (to the Screen size).\n *\n * > Note that this makes the `sort()` function descending, so the first element (`[0]`) is the \"best\" device.\n */\nexport const sortFormats = (left: CameraDeviceFormat, right: CameraDeviceFormat): number => {\n  let leftPoints = 0,\n    rightPoints = 0;\n\n  // we downscale the points so much that we are in smaller number ranges for future calculations\n  // e.g. for 4k (4096), this adds 8 points.\n  leftPoints += Math.round(left.photoWidth / 500);\n  rightPoints += Math.round(right.photoWidth / 500);\n  // e.g. for 4k (4096), this adds 8 points.\n  leftPoints += Math.round(left.videoWidth / 500);\n  rightPoints += Math.round(right.videoWidth / 500);\n\n  // we downscale the points here as well, so if left has 16:9 and right has 21:9, this roughly\n  // adds 5 points. If the difference is smaller, e.g. 16:9 vs 17:9, this roughly adds a little\n  // bit over 1 point, just enough to overrule the FPS below.\n  const leftAspectRatioDiff = left.photoHeight / left.photoWidth - SCREEN_ASPECT_RATIO;\n  const rightAspectRatioDiff = right.photoHeight / right.photoWidth - SCREEN_ASPECT_RATIO;\n  leftPoints -= Math.abs(leftAspectRatioDiff) * 10;\n  rightPoints -= Math.abs(rightAspectRatioDiff) * 10;\n\n  return rightPoints - leftPoints;\n};\n\n/**\n * Returns `true` if the given Frame Rate Range (`range`) contains the given frame rate (`fps`)\n *\n * @param {FrameRateRange} range The range to check if the given `fps` are included in\n * @param {number} fps The FPS to check if the given `range` supports.\n * @example\n * ```ts\n * // get all formats that support 60 FPS\n * const formatsWithHighFps = useMemo(() => device.formats.filter((f) => f.frameRateRanges.some((r) => frameRateIncluded(r, 60))), [device.formats])\n * ```\n * @method\n */\nexport const frameRateIncluded = (range: FrameRateRange, fps: number): boolean => fps >= range.minFrameRate && fps <= range.maxFrameRate;\n"]}