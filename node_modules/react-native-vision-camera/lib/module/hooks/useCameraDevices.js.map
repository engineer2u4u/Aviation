{"version":3,"sources":["useCameraDevices.ts"],"names":["useEffect","useState","sortDevices","Camera","parsePhysicalDeviceTypes","DefaultCameraDevices","back","undefined","external","front","unspecified","useCameraDevices","deviceType","cameraDevices","setCameraDevices","isMounted","loadDevice","devices","getAvailableCameraDevices","sort","filter","d","parsedType","find","position"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAAgDC,wBAAhD,QAA0G,iBAA1G;AAKA,MAAMC,oBAAmC,GAAG;AAC1CC,EAAAA,IAAI,EAAEC,SADoC;AAE1CC,EAAAA,QAAQ,EAAED,SAFgC;AAG1CE,EAAAA,KAAK,EAAEF,SAHmC;AAI1CG,EAAAA,WAAW,EAAEH;AAJ6B,CAA5C;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkBA,OAAO,SAASI,gBAAT,CAA0BC,UAA1B,EAA0G;AAC/G,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAgBI,oBAAhB,CAAlD;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,SAAS,GAAG,IAAhB;;AAEA,UAAMC,UAAU,GAAG,YAA2B;AAC5C,UAAIC,OAAO,GAAG,MAAMd,MAAM,CAACe,yBAAP,EAApB;AACA,UAAI,CAACH,SAAL,EAAgB;AAEhBE,MAAAA,OAAO,GAAGA,OAAO,CAACE,IAAR,CAAajB,WAAb,CAAV;;AACA,UAAIU,UAAU,IAAI,IAAlB,EAAwB;AACtBK,QAAAA,OAAO,GAAGA,OAAO,CAACG,MAAR,CAAgBC,CAAD,IAAO;AAC9B,gBAAMC,UAAU,GAAGlB,wBAAwB,CAACiB,CAAC,CAACJ,OAAH,CAA3C;AACA,iBAAOK,UAAU,KAAKV,UAAtB;AACD,SAHS,CAAV;AAID;;AACDE,MAAAA,gBAAgB,CAAC;AACfR,QAAAA,IAAI,EAAEW,OAAO,CAACM,IAAR,CAAcF,CAAD,IAAOA,CAAC,CAACG,QAAF,KAAe,MAAnC,CADS;AAEfhB,QAAAA,QAAQ,EAAES,OAAO,CAACM,IAAR,CAAcF,CAAD,IAAOA,CAAC,CAACG,QAAF,KAAe,UAAnC,CAFK;AAGff,QAAAA,KAAK,EAAEQ,OAAO,CAACM,IAAR,CAAcF,CAAD,IAAOA,CAAC,CAACG,QAAF,KAAe,OAAnC,CAHQ;AAIfd,QAAAA,WAAW,EAAEO,OAAO,CAACM,IAAR,CAAcF,CAAD,IAAOA,CAAC,CAACG,QAAF,KAAe,aAAnC;AAJE,OAAD,CAAhB;AAMD,KAjBD;;AAkBAR,IAAAA,UAAU;AAEV,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GA1BQ,EA0BN,CAACH,UAAD,CA1BM,CAAT;AA4BA,SAAOC,aAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport type { CameraPosition } from '../CameraPosition';\nimport { sortDevices } from '../utils/FormatFilter';\nimport { Camera } from '../Camera';\nimport { CameraDevice, LogicalCameraDeviceType, parsePhysicalDeviceTypes, PhysicalCameraDeviceType } from '../CameraDevice';\n\nexport type CameraDevices = {\n  [key in CameraPosition]: CameraDevice | undefined;\n};\nconst DefaultCameraDevices: CameraDevices = {\n  back: undefined,\n  external: undefined,\n  front: undefined,\n  unspecified: undefined,\n};\n\n/**\n * Gets the best available {@linkcode CameraDevice}. Devices with more cameras are preferred.\n *\n * @returns The best matching {@linkcode CameraDevice}.\n * @throws {@linkcode CameraRuntimeError} if no device was found.\n * @example\n * ```tsx\n * const device = useCameraDevice()\n * // ...\n * return <Camera device={device} />\n * ```\n */\nexport function useCameraDevices(): CameraDevices;\n\n/**\n * Gets a {@linkcode CameraDevice} for the requested device type.\n *\n * @param {PhysicalCameraDeviceType | LogicalCameraDeviceType} deviceType Specifies a device type which will be used as a device filter.\n * @returns A {@linkcode CameraDevice} for the requested device type.\n * @throws {@linkcode CameraRuntimeError} if no device was found.\n * @example\n * ```tsx\n * const device = useCameraDevice('wide-angle-camera')\n * // ...\n * return <Camera device={device} />\n * ```\n */\nexport function useCameraDevices(deviceType: PhysicalCameraDeviceType | LogicalCameraDeviceType): CameraDevices;\n\nexport function useCameraDevices(deviceType?: PhysicalCameraDeviceType | LogicalCameraDeviceType): CameraDevices {\n  const [cameraDevices, setCameraDevices] = useState<CameraDevices>(DefaultCameraDevices);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const loadDevice = async (): Promise<void> => {\n      let devices = await Camera.getAvailableCameraDevices();\n      if (!isMounted) return;\n\n      devices = devices.sort(sortDevices);\n      if (deviceType != null) {\n        devices = devices.filter((d) => {\n          const parsedType = parsePhysicalDeviceTypes(d.devices);\n          return parsedType === deviceType;\n        });\n      }\n      setCameraDevices({\n        back: devices.find((d) => d.position === 'back'),\n        external: devices.find((d) => d.position === 'external'),\n        front: devices.find((d) => d.position === 'front'),\n        unspecified: devices.find((d) => d.position === 'unspecified'),\n      });\n    };\n    loadDevice();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [deviceType]);\n\n  return cameraDevices;\n}\n"]}