{"version":3,"sources":["useFrameProcessor.ts"],"names":["useCallback","capturableConsole","console","useFrameProcessor","frameProcessor","dependencies","frame","global","didSetConsole","debug","__callAsync","log","warn","error","info","_setGlobalConsole"],"mappings":"AAAA;AAEA,SAAyBA,WAAzB,QAA4C,OAA5C;AAKA,MAAMC,iBAAiB,GAAGC,OAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,iBAAT,CAA2BC,cAA3B,EAA2DC,YAA3D,EAAyG;AAC9G,SAAOL,WAAW,CAAEM,KAAD,IAAkB;AACnC,cADmC,CAGnC;;AACA,QAAIC,MAAM,CAACC,aAAP,IAAwB,IAAxB,IAAgCD,MAAM,CAACC,aAAP,KAAyB,KAA7D,EAAoE;AAClE,YAAMN,OAAO,GAAG;AACd;AACA;AACAO,QAAAA,KAAK,EAAER,iBAAiB,CAACQ,KAAlB,CAAwBC,WAHjB;AAId;AACA;AACAC,QAAAA,GAAG,EAAEV,iBAAiB,CAACU,GAAlB,CAAsBD,WANb;AAOd;AACA;AACAE,QAAAA,IAAI,EAAEX,iBAAiB,CAACW,IAAlB,CAAuBF,WATf;AAUd;AACA;AACAG,QAAAA,KAAK,EAAEZ,iBAAiB,CAACY,KAAlB,CAAwBH,WAZjB;AAad;AACA;AACAI,QAAAA,IAAI,EAAEb,iBAAiB,CAACa,IAAlB,CAAuBJ;AAff,OAAhB,CADkE,CAkBlE;;AACAK,MAAAA,iBAAiB,CAACb,OAAD,CAAjB,CAnBkE,CAoBlE;;;AACAK,MAAAA,MAAM,CAACC,aAAP,GAAuB,IAAvB;AACD;;AAEDJ,IAAAA,cAAc,CAACE,KAAD,CAAd,CA5BmC,CA6BnC;AACD,GA9BiB,EA8BfD,YA9Be,CAAlB;AA+BD","sourcesContent":["/* global _setGlobalConsole */\n\nimport { DependencyList, useCallback } from 'react';\nimport type { Frame } from '../Frame';\n\ntype FrameProcessor = (frame: Frame) => void;\n\nconst capturableConsole = console;\n\n/**\n * Returns a memoized Frame Processor function wich you can pass to the `<Camera>`. (See [\"Frame Processors\"](https://mrousavy.github.io/react-native-vision-camera/docs/guides/frame-processors))\n *\n * Make sure to add the `'worklet'` directive to the top of the Frame Processor function, otherwise it will not get compiled into a worklet.\n *\n * @param frameProcessor The Frame Processor\n * @param dependencies The React dependencies which will be copied into the VisionCamera JS-Runtime.\n * @returns The memoized Frame Processor.\n * @example\n * ```ts\n * const frameProcessor = useFrameProcessor((frame) => {\n *   'worklet'\n *   const qrCodes = scanQRCodes(frame)\n *   console.log(`QR Codes: ${qrCodes}`)\n * }, [])\n * ```\n */\nexport function useFrameProcessor(frameProcessor: FrameProcessor, dependencies: DependencyList): FrameProcessor {\n  return useCallback((frame: Frame) => {\n    'worklet';\n\n    // @ts-expect-error\n    if (global.didSetConsole == null || global.didSetConsole === false) {\n      const console = {\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        debug: capturableConsole.debug.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        log: capturableConsole.log.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        warn: capturableConsole.warn.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        error: capturableConsole.error.__callAsync,\n        // @ts-expect-error __callAsync is injected by native REA\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        info: capturableConsole.info.__callAsync,\n      };\n      // @ts-expect-error _setGlobalConsole is set by RuntimeDecorator::decorateRuntime\n      _setGlobalConsole(console);\n      // @ts-expect-error\n      global.didSetConsole = true;\n    }\n\n    frameProcessor(frame);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n}\n"]}