{"version":3,"sources":["CameraError.ts"],"names":["CameraError","Error","code","_code","message","_message","cause","c","_cause","undefined","constructor","name","toString","CameraCaptureError","CameraRuntimeError","isErrorWithCause","error","stacktrace","isCameraErrorJson","tryParseNativeCameraError","nativeError","startsWith"],"mappings":";;;;;;;;;AAuDA;AACA;AACA;;AAyDA;AACA;AACA;AACA,MAAMA,WAAN,SAAyDC,KAAzD,CAA+D;AAK9C,MAAJC,IAAI,GAAU;AACvB,WAAO,KAAKC,KAAZ;AACD;;AACiB,MAAPC,OAAO,GAAW;AAC3B,WAAO,KAAKC,QAAZ;AACD;;AACe,MAALC,KAAK,GAAsB;AACpC,UAAMC,CAAC,GAAG,KAAKC,MAAf;AACA,QAAID,CAAC,IAAI,IAAT,EAAe,OAAOE,SAAP;AACf,WAAO,IAAIR,KAAJ,CAAW,IAAGM,CAAC,CAACL,IAAK,MAAKK,CAAC,CAACH,OAAQ,EAApC,CAAP;AACD;AAED;AACF;AACA;;;AACEM,EAAAA,WAAW,CAACR,IAAD,EAAcE,OAAd,EAA+BE,KAA/B,EAAuD;AAChE,UAAO,IAAGJ,IAAK,MAAKE,OAAQ,GAAEE,KAAK,IAAI,IAAT,GAAiB,YAAWA,KAAK,CAACF,OAAQ,GAA1C,GAA+C,EAAG,EAAhF;;AADgE;;AAAA;;AAAA;;AAEhE,UAAMO,IAAN,GAAaT,IAAb;AACA,UAAME,OAAN,GAAgBA,OAAhB;AACA,SAAKD,KAAL,GAAaD,IAAb;AACA,SAAKG,QAAL,GAAgBD,OAAhB;AACA,SAAKI,MAAL,GAAcF,KAAd;AACD;;AAEMM,EAAAA,QAAQ,GAAW;AACxB,WAAQ,IAAG,KAAKV,IAAK,MAAK,KAAKE,OAAQ,EAAvC;AACD;;AA/B4D;AAkC/D;AACA;AACA;AACA;AACA;;;AACO,MAAMS,kBAAN,SAAiCb,WAAjC,CAA2D;AAElE;AACA;AACA;AACA;AACA;;;;;AACO,MAAMc,kBAAN,SAAiCd,WAAjC,CAEL;AAEF;AACA;AACA;AACA;AACA;;;;;AACO,MAAMe,gBAAgB,GAAIC,KAAD,IAC9B,OAAOA,KAAP,KAAiB,QAAjB,IACAA,KAAK,IAAI,IADT,IAEA;AACA,OAAOA,KAAK,CAACZ,OAAb,KAAyB,QAHzB,MAIA;AACC,OAAOY,KAAK,CAACC,UAAb,KAA4B,QAA5B,IAAwCD,KAAK,CAACC,UAAN,IAAoB,IAL7D,OAMA;AACCF,gBAAgB,CAACC,KAAK,CAACV,KAAP,CAAhB,IAAiCU,KAAK,CAACV,KAAN,IAAe,IAPjD,CADK;;;;AAUP,MAAMY,iBAAiB,GAAIF,KAAD,IACxB,OAAOA,KAAP,KAAiB,QAAjB,IACAA,KAAK,IAAI,IADT,IAEA;AACA,OAAOA,KAAK,CAACd,IAAb,KAAsB,QAHtB,IAIA;AACA,OAAOc,KAAK,CAACZ,OAAb,KAAyB,QALzB,MAMA;AACC,OAAOY,KAAK,CAACV,KAAb,KAAuB,QAAvB,IAAmCU,KAAK,CAACV,KAAN,IAAe,IAPnD,CADF;AAUA;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMa,yBAAyB,GAAOC,WAAJ,IAAsE;AAC7G,MAAIF,iBAAiB,CAACE,WAAD,CAArB,EAAoC;AAClC,QAAIA,WAAW,CAAClB,IAAZ,CAAiBmB,UAAjB,CAA4B,SAA5B,CAAJ,EAA4C;AAC1C,aAAO,IAAIR,kBAAJ,CAAuBO,WAAW,CAAClB,IAAnC,EAAyDkB,WAAW,CAAChB,OAArE,EAA8EgB,WAAW,CAACd,KAA1F,CAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAIQ,kBAAJ,EACL;AACAM,MAAAA,WAAW,CAAClB,IAFP,EAGLkB,WAAW,CAAChB,OAHP,EAILgB,WAAW,CAACd,KAJP,CAAP;AAMD;AACF,GAXD,MAWO;AACL,WAAOc,WAAP;AACD;AACF,CAfM","sourcesContent":["export type PermissionError = 'permission/microphone-permission-denied' | 'permission/camera-permission-denied';\nexport type ParameterError =\n  | 'parameter/invalid-parameter'\n  | 'parameter/unsupported-os'\n  | 'parameter/unsupported-output'\n  | 'parameter/unsupported-input'\n  | 'parameter/invalid-combination';\nexport type DeviceError =\n  | 'device/configuration-error'\n  | 'device/no-device'\n  | 'device/invalid-device'\n  | 'device/parallel-video-processing-not-supported'\n  | 'device/torch-unavailable'\n  | 'device/microphone-unavailable'\n  | 'device/low-light-boost-not-supported'\n  | 'device/focus-not-supported'\n  | 'device/camera-not-available-on-simulator';\nexport type FrameProcessorError = 'frame-processor/unavailable';\nexport type FormatError =\n  | 'format/invalid-fps'\n  | 'format/invalid-hdr'\n  | 'format/invalid-low-light-boost'\n  | 'format/invalid-format'\n  | 'format/invalid-color-space'\n  | 'format/invalid-preset';\nexport type SessionError =\n  | 'session/camera-not-ready'\n  | 'session/audio-session-setup-failed'\n  | 'session/audio-in-use-by-other-app'\n  | 'session/audio-session-failed-to-activate';\nexport type CaptureError =\n  | 'capture/invalid-photo-format'\n  | 'capture/encoder-error'\n  | 'capture/muxer-error'\n  | 'capture/recording-in-progress'\n  | 'capture/no-recording-in-progress'\n  | 'capture/file-io-error'\n  | 'capture/create-temp-file-error'\n  | 'capture/invalid-video-options'\n  | 'capture/create-recorder-error'\n  | 'capture/recorder-error'\n  | 'capture/no-valid-data'\n  | 'capture/inactive-source'\n  | 'capture/insufficient-storage'\n  | 'capture/file-size-limit-reached'\n  | 'capture/invalid-photo-codec'\n  | 'capture/not-bound-error'\n  | 'capture/capture-type-not-supported'\n  | 'capture/video-not-enabled'\n  | 'capture/photo-not-enabled'\n  | 'capture/aborted'\n  | 'capture/unknown';\nexport type SystemError = 'system/no-camera-manager' | 'system/view-not-found';\nexport type UnknownError = 'unknown/unknown';\n\n/**\n * Represents a JSON-style error cause. This contains native `NSError`/`Throwable` information, and can have recursive {@linkcode ErrorWithCause.cause | .cause} properties until the ultimate cause has been found.\n */\nexport interface ErrorWithCause {\n  /**\n   * The native error's code.\n   *\n   * * iOS: `NSError.code`\n   * * Android: N/A\n   */\n  code?: number;\n  /**\n   * The native error's domain.\n   *\n   * * iOS: `NSError.domain`\n   * * Android: N/A\n   */\n  domain?: string;\n  /**\n   * The native error description\n   *\n   * * iOS: `NSError.message`\n   * * Android: `Throwable.message`\n   */\n  message: string;\n  /**\n   * Optional additional details\n   *\n   * * iOS: `NSError.userInfo`\n   * * Android: N/A\n   */\n  details?: Record<string, unknown>;\n  /**\n   * Optional Java stacktrace\n   *\n   * * iOS: N/A\n   * * Android: `Throwable.stacktrace.toString()`\n   */\n  stacktrace?: string;\n  /**\n   * Optional additional cause for nested errors\n   *\n   * * iOS: N/A\n   * * Android: `Throwable.cause`\n   */\n  cause?: ErrorWithCause;\n}\n\ntype CameraErrorCode =\n  | PermissionError\n  | ParameterError\n  | DeviceError\n  | FrameProcessorError\n  | FormatError\n  | SessionError\n  | CaptureError\n  | SystemError\n  | UnknownError;\n\n/**\n * Represents any kind of error that occured in the {@linkcode Camera} View Module.\n */\nclass CameraError<TCode extends CameraErrorCode> extends Error {\n  private readonly _code: TCode;\n  private readonly _message: string;\n  private readonly _cause?: ErrorWithCause;\n\n  public get code(): TCode {\n    return this._code;\n  }\n  public get message(): string {\n    return this._message;\n  }\n  public get cause(): Error | undefined {\n    const c = this._cause;\n    if (c == null) return undefined;\n    return new Error(`[${c.code}]: ${c.message}`);\n  }\n\n  /**\n   * @internal\n   */\n  constructor(code: TCode, message: string, cause?: ErrorWithCause) {\n    super(`[${code}]: ${message}${cause != null ? ` (Cause: ${cause.message})` : ''}`);\n    super.name = code;\n    super.message = message;\n    this._code = code;\n    this._message = message;\n    this._cause = cause;\n  }\n\n  public toString(): string {\n    return `[${this.code}]: ${this.message}`;\n  }\n}\n\n/**\n * Represents any kind of error that occured while trying to capture a video or photo.\n *\n * See the [\"Camera Errors\" documentation](https://mrousavy.github.io/react-native-vision-camera/docs/guides/errors) for more information about Camera Errors.\n */\nexport class CameraCaptureError extends CameraError<CaptureError> {}\n\n/**\n * Represents any kind of error that occured in the Camera View Module.\n *\n * See the [\"Camera Errors\" documentation](https://mrousavy.github.io/react-native-vision-camera/docs/guides/errors) for more information about Camera Errors.\n */\nexport class CameraRuntimeError extends CameraError<\n  PermissionError | ParameterError | DeviceError | FormatError | FrameProcessorError | SessionError | SystemError | UnknownError\n> {}\n\n/**\n * Checks if the given `error` is of type {@linkcode ErrorWithCause}\n * @param {unknown} error Any unknown object to validate\n * @returns `true` if the given `error` is of type {@linkcode ErrorWithCause}\n */\nexport const isErrorWithCause = (error: unknown): error is ErrorWithCause =>\n  typeof error === 'object' &&\n  error != null &&\n  // @ts-expect-error error is still unknown\n  typeof error.message === 'string' &&\n  // @ts-expect-error error is still unknown\n  (typeof error.stacktrace === 'string' || error.stacktrace == null) &&\n  // @ts-expect-error error is still unknown\n  (isErrorWithCause(error.cause) || error.cause == null);\n\nconst isCameraErrorJson = (error: unknown): error is { code: string; message: string; cause?: ErrorWithCause } =>\n  typeof error === 'object' &&\n  error != null &&\n  // @ts-expect-error error is still unknown\n  typeof error.code === 'string' &&\n  // @ts-expect-error error is still unknown\n  typeof error.message === 'string' &&\n  // @ts-expect-error error is still unknown\n  (typeof error.cause === 'object' || error.cause == null);\n\n/**\n * Tries to parse an error coming from native to a typed JS camera error.\n * @param {CameraError} nativeError The native error instance. This is a JSON in the legacy native module architecture.\n * @returns A {@linkcode CameraRuntimeError} or {@linkcode CameraCaptureError}, or the `nativeError` itself if it's not parsable\n * @method\n */\nexport const tryParseNativeCameraError = <T>(nativeError: T): (CameraRuntimeError | CameraCaptureError) | T => {\n  if (isCameraErrorJson(nativeError)) {\n    if (nativeError.code.startsWith('capture')) {\n      return new CameraCaptureError(nativeError.code as CaptureError, nativeError.message, nativeError.cause);\n    } else {\n      return new CameraRuntimeError(\n        // @ts-expect-error the code is string, we narrow it down to TS union.\n        nativeError.code,\n        nativeError.message,\n        nativeError.cause,\n      );\n    }\n  } else {\n    return nativeError;\n  }\n};\n"]}