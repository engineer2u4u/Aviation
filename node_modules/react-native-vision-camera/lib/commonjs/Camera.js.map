{"version":3,"sources":["Camera.tsx"],"names":["CameraModule","NativeModules","CameraView","console","error","Camera","React","PureComponent","constructor","props","displayName","onViewReady","bind","onInitialized","onError","onFrameProcessorPerformanceSuggestionAvailable","ref","createRef","lastFrameProcessor","undefined","handle","nodeHandle","current","CameraRuntimeError","takePhoto","options","e","takeSnapshot","Platform","OS","CameraCaptureError","startRecording","onRecordingError","onRecordingFinished","passThroughOptions","onRecordCallback","video","pauseRecording","resumeRecording","stopRecording","focus","point","getAvailableVideoCodecs","fileType","getAvailableCameraDevices","getCameraPermissionStatus","getMicrophonePermissionStatus","requestCameraPermission","requestMicrophonePermission","event","nativeEvent","cause","code","message","assertFrameProcessorsEnabled","global","setFrameProcessor","unsetFrameProcessor","frameProcessor","isNativeViewMounted","componentDidUpdate","render","device","frameProcessorFps","id","NativeCameraView"],"mappings":"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AAU;AACV,YAAM,4CAA0BA,CAA1B,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC6B,QAAdW,cAAc,GAAkB;AAC3C,QAAI;AACF,aAAO,MAAMrC,YAAY,CAACqC,cAAb,CAA4B,KAAKjB,MAAjC,CAAb;AACD,KAFD,CAEE,OAAOM,CAAP,EAAU;AACV,YAAM,4CAA0BA,CAA1B,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC8B,QAAfY,eAAe,GAAkB;AAC5C,QAAI;AACF,aAAO,MAAMtC,YAAY,CAACsC,eAAb,CAA6B,KAAKlB,MAAlC,CAAb;AACD,KAFD,CAEE,OAAOM,CAAP,EAAU;AACV,YAAM,4CAA0BA,CAA1B,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC4B,QAAba,aAAa,GAAkB;AAC1C,QAAI;AACF,aAAO,MAAMvC,YAAY,CAACuC,aAAb,CAA2B,KAAKnB,MAAhC,CAAb;AACD,KAFD,CAEE,OAAOM,CAAP,EAAU;AACV,YAAM,4CAA0BA,CAA1B,CAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACoB,QAALc,KAAK,CAACC,KAAD,EAA8B;AAC9C,QAAI;AACF,aAAO,MAAMzC,YAAY,CAACwC,KAAb,CAAmB,KAAKpB,MAAxB,EAAgCqB,KAAhC,CAAb;AACD,KAFD,CAEE,OAAOf,CAAP,EAAU;AACV,YAAM,4CAA0BA,CAA1B,CAAN;AACD;AACF,GA9N0D,CA+N3D;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACsC,QAAvBgB,uBAAuB,CAACC,QAAD,EAAwD;AAC1F,QAAIf,sBAASC,EA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","sourcesContent":["import React from 'react';\nimport { requireNativeComponent, NativeModules, NativeSyntheticEvent, findNodeHandle, NativeMethods, Platform } from 'react-native';\nimport type { FrameProcessorPerformanceSuggestion, VideoFileType } from '.';\nimport type { CameraDevice } from './CameraDevice';\nimport type { ErrorWithCause } from './CameraError';\nimport { CameraCaptureError, CameraRuntimeError, tryParseNativeCameraError, isErrorWithCause } from './CameraError';\nimport type { CameraProps } from './CameraProps';\nimport type { Frame } from './Frame';\nimport type { PhotoFile, TakePhotoOptions } from './PhotoFile';\nimport type { Point } from './Point';\nimport type { TakeSnapshotOptions } from './Snapshot';\nimport type { CameraVideoCodec, RecordVideoOptions, VideoFile } from './VideoFile';\n\n//#region Types\nexport type CameraPermissionStatus = 'authorized' | 'not-determined' | 'denied' | 'restricted';\nexport type CameraPermissionRequestResult = 'authorized' | 'denied';\n\ninterface OnErrorEvent {\n  code: string;\n  message: string;\n  cause?: ErrorWithCause;\n}\ntype NativeCameraViewProps = Omit<\n  CameraProps,\n  'device' | 'onInitialized' | 'onError' | 'onFrameProcessorPerformanceSuggestionAvailable' | 'frameProcessor' | 'frameProcessorFps'\n> & {\n  cameraId: string;\n  frameProcessorFps?: number; // native cannot use number | string, so we use '-1' for 'auto'\n  enableFrameProcessor: boolean;\n  onInitialized?: (event: NativeSyntheticEvent<void>) => void;\n  onError?: (event: NativeSyntheticEvent<OnErrorEvent>) => void;\n  onFrameProcessorPerformanceSuggestionAvailable?: (event: NativeSyntheticEvent<FrameProcessorPerformanceSuggestion>) => void;\n  onViewReady: () => void;\n};\ntype RefType = React.Component<NativeCameraViewProps> & Readonly<NativeMethods>;\n//#endregion\n\n// NativeModules automatically resolves 'CameraView' to 'CameraViewModule'\n// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\nconst CameraModule = NativeModules.CameraView;\nif (CameraModule == null) console.error(\"Camera: Native Module 'CameraView' was null! Did you run pod install?\");\n\n//#region Camera Component\n/**\n * ### A powerful `<Camera>` component.\n *\n * Read the [VisionCamera documentation](https://mrousavy.github.io/react-native-vision-camera/) for more information.\n *\n * The `<Camera>` component's most important (and therefore _required_) properties are:\n *\n * * {@linkcode CameraProps.device | device}: Specifies the {@linkcode CameraDevice} to use. Get a {@linkcode CameraDevice} by using the {@linkcode useCameraDevices | useCameraDevices()} hook, or manually by using the {@linkcode Camera.getAvailableCameraDevices Camera.getAvailableCameraDevices()} function.\n * * {@linkcode CameraProps.isActive | isActive}: A boolean value that specifies whether the Camera should actively stream video frames or not. This can be compared to a Video component, where `isActive` specifies whether the video is paused or not. If you fully unmount the `<Camera>` component instead of using `isActive={false}`, the Camera will take a bit longer to start again.\n *\n * @example\n * ```tsx\n * function App() {\n *   const devices = useCameraDevices('wide-angle-camera')\n *   const device = devices.back\n *\n *   if (device == null) return <LoadingView />\n *   return (\n *     <Camera\n *       style={StyleSheet.absoluteFill}\n *       device={device}\n *       isActive={true}\n *     />\n *   )\n * }\n * ```\n *\n * @component\n */\nexport class Camera extends React.PureComponent<CameraProps> {\n  /** @internal */\n  static displayName = 'Camera';\n  /** @internal */\n  displayName = Camera.displayName;\n  private lastFrameProcessor: ((frame: Frame) => void) | undefined;\n  private isNativeViewMounted = false;\n\n  private readonly ref: React.RefObject<RefType>;\n\n  /** @internal */\n  constructor(props: CameraProps) {\n    super(props);\n    this.onViewReady = this.onViewReady.bind(this);\n    this.onInitialized = this.onInitialized.bind(this);\n    this.onError = this.onError.bind(this);\n    this.onFrameProcessorPerformanceSuggestionAvailable = this.onFrameProcessorPerformanceSuggestionAvailable.bind(this);\n    this.ref = React.createRef<RefType>();\n    this.lastFrameProcessor = undefined;\n  }\n\n  private get handle(): number | null {\n    const nodeHandle = findNodeHandle(this.ref.current);\n    if (nodeHandle == null || nodeHandle === -1) {\n      throw new CameraRuntimeError(\n        'system/view-not-found',\n        \"Could not get the Camera's native view tag! Does the Camera View exist in the native view-tree?\",\n      );\n    }\n\n    return nodeHandle;\n  }\n\n  //#region View-specific functions (UIViewManager)\n  /**\n   * Take a single photo and write it's content to a temporary file.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while capturing the photo. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   * @example\n   * ```ts\n   * const photo = await camera.current.takePhoto({\n   *   qualityPrioritization: 'quality',\n   *   flash: 'on',\n   *   enableAutoRedEyeReduction: true\n   * })\n   * ```\n   */\n  public async takePhoto(options?: TakePhotoOptions): Promise<PhotoFile> {\n    try {\n      return await CameraModule.takePhoto(this.handle, options ?? {});\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Take a snapshot of the current preview view.\n   *\n   * This can be used as an alternative to {@linkcode Camera.takePhoto | takePhoto()} if speed is more important than quality\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while taking a snapshot. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @platform Android\n   * @example\n   * ```ts\n   * const photo = await camera.current.takeSnapshot({\n   *   quality: 85,\n   *   skipMetadata: true\n   * })\n   * ```\n   */\n  public async takeSnapshot(options?: TakeSnapshotOptions): Promise<PhotoFile> {\n    if (Platform.OS !== 'android')\n      throw new CameraCaptureError('capture/capture-type-not-supported', `'takeSnapshot()' is not available on ${Platform.OS}!`);\n\n    try {\n      return await CameraModule.takeSnapshot(this.handle, options ?? {});\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Start a new video recording.\n   *\n   * Records in the following formats:\n   * * **iOS**: QuickTime (`.mov`)\n   * * **Android**: MPEG4 (`.mp4`)\n   *\n   * @blocking This function is synchronized/blocking.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while starting the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * camera.current.startRecording({\n   *   onRecordingFinished: (video) => console.log(video),\n   *   onRecordingError: (error) => console.error(error),\n   * })\n   * setTimeout(() => {\n   *   camera.current.stopRecording()\n   * }, 5000)\n   * ```\n   */\n  public startRecording(options: RecordVideoOptions): void {\n    const { onRecordingError, onRecordingFinished, ...passThroughOptions } = options;\n    if (typeof onRecordingError !== 'function' || typeof onRecordingFinished !== 'function')\n      throw new CameraRuntimeError('parameter/invalid-parameter', 'The onRecordingError or onRecordingFinished functions were not set!');\n\n    const onRecordCallback = (video?: VideoFile, error?: CameraCaptureError): void => {\n      if (error != null) return onRecordingError(error);\n      if (video != null) return onRecordingFinished(video);\n    };\n    // TODO: Use TurboModules to either make this a sync invokation, or make it async.\n    try {\n      CameraModule.startRecording(this.handle, passThroughOptions, onRecordCallback);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Pauses the current video recording.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while pausing the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * // Start\n   * await camera.current.startRecording()\n   * await timeout(1000)\n   * // Pause\n   * await camera.current.pauseRecording()\n   * await timeout(500)\n   * // Resume\n   * await camera.current.resumeRecording()\n   * await timeout(2000)\n   * // Stop\n   * const video = await camera.current.stopRecording()\n   * ```\n   */\n  public async pauseRecording(): Promise<void> {\n    try {\n      return await CameraModule.pauseRecording(this.handle);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Resumes a currently paused video recording.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while resuming the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * // Start\n   * await camera.current.startRecording()\n   * await timeout(1000)\n   * // Pause\n   * await camera.current.pauseRecording()\n   * await timeout(500)\n   * // Resume\n   * await camera.current.resumeRecording()\n   * await timeout(2000)\n   * // Stop\n   * const video = await camera.current.stopRecording()\n   * ```\n   */\n  public async resumeRecording(): Promise<void> {\n    try {\n      return await CameraModule.resumeRecording(this.handle);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Stop the current video recording.\n   *\n   * @throws {@linkcode CameraCaptureError} When any kind of error occured while stopping the video recording. Use the {@linkcode CameraCaptureError.code | code} property to get the actual error\n   *\n   * @example\n   * ```ts\n   * await camera.current.startRecording()\n   * setTimeout(async () => {\n   *  const video = await camera.current.stopRecording()\n   * }, 5000)\n   * ```\n   */\n  public async stopRecording(): Promise<void> {\n    try {\n      return await CameraModule.stopRecording(this.handle);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  /**\n   * Focus the camera to a specific point in the coordinate system.\n   * @param {Point} point The point to focus to. This should be relative to the Camera view's coordinate system,\n   * and expressed in Pixel on iOS and Points on Android.\n   *  * `(0, 0)` means **top left**.\n   *  * `(CameraView.width, CameraView.height)` means **bottom right**.\n   *\n   * Make sure the value doesn't exceed the CameraView's dimensions.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while focussing. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   * @example\n   * ```ts\n   * await camera.current.focus({\n   *   x: tapEvent.x,\n   *   y: tapEvent.y\n   * })\n   * ```\n   */\n  public async focus(point: Point): Promise<void> {\n    try {\n      return await CameraModule.focus(this.handle, point);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  //#endregion\n\n  /**\n   * Get a list of video codecs the current camera supports for a given file type.  Returned values are ordered by efficiency (descending).\n   * @example\n   * ```ts\n   * const codecs = await camera.current.getAvailableVideoCodecs(\"mp4\")\n   * ```\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting available video codecs. Use the {@linkcode ParameterError.code | code} property to get the actual error\n   * @platform iOS\n   */\n  public async getAvailableVideoCodecs(fileType?: VideoFileType): Promise<CameraVideoCodec[]> {\n    if (Platform.OS !== 'ios') return []; // no video codecs supported on other platforms.\n\n    try {\n      return await CameraModule.getAvailableVideoCodecs(this.handle, fileType);\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n\n  //#region Static Functions (NativeModule)\n  /**\n   * Get a list of all available camera devices on the current phone.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting all available camera devices. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   * @example\n   * ```ts\n   * const devices = await Camera.getAvailableCameraDevices()\n   * const filtered = devices.filter((d) => matchesMyExpectations(d))\n   * const sorted = devices.sort(sortDevicesByAmountOfCameras)\n   * return {\n   *   back: sorted.find((d) => d.position === \"back\"),\n   *   front: sorted.find((d) => d.position === \"front\")\n   * }\n   * ```\n   */\n  public static async getAvailableCameraDevices(): Promise<CameraDevice[]> {\n    try {\n      return await CameraModule.getAvailableCameraDevices();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Gets the current Camera Permission Status. Check this before mounting the Camera to ensure\n   * the user has permitted the app to use the camera.\n   *\n   * To actually prompt the user for camera permission, use {@linkcode Camera.requestCameraPermission | requestCameraPermission()}.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting the current permission status. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async getCameraPermissionStatus(): Promise<CameraPermissionStatus> {\n    try {\n      return await CameraModule.getCameraPermissionStatus();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Gets the current Microphone-Recording Permission Status. Check this before mounting the Camera to ensure\n   * the user has permitted the app to use the microphone.\n   *\n   * To actually prompt the user for microphone permission, use {@linkcode Camera.requestMicrophonePermission | requestMicrophonePermission()}.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while getting the current permission status. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async getMicrophonePermissionStatus(): Promise<CameraPermissionStatus> {\n    try {\n      return await CameraModule.getMicrophonePermissionStatus();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Shows a \"request permission\" alert to the user, and resolves with the new camera permission status.\n   *\n   * If the user has previously blocked the app from using the camera, the alert will not be shown\n   * and `\"denied\"` will be returned.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while requesting permission. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async requestCameraPermission(): Promise<CameraPermissionRequestResult> {\n    try {\n      return await CameraModule.requestCameraPermission();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  /**\n   * Shows a \"request permission\" alert to the user, and resolves with the new microphone permission status.\n   *\n   * If the user has previously blocked the app from using the microphone, the alert will not be shown\n   * and `\"denied\"` will be returned.\n   *\n   * @throws {@linkcode CameraRuntimeError} When any kind of error occured while requesting permission. Use the {@linkcode CameraRuntimeError.code | code} property to get the actual error\n   */\n  public static async requestMicrophonePermission(): Promise<CameraPermissionRequestResult> {\n    try {\n      return await CameraModule.requestMicrophonePermission();\n    } catch (e) {\n      throw tryParseNativeCameraError(e);\n    }\n  }\n  //#endregion\n\n  //#region Events (Wrapped to maintain reference equality)\n  private onError(event: NativeSyntheticEvent<OnErrorEvent>): void {\n    if (this.props.onError != null) {\n      const error = event.nativeEvent;\n      const cause = isErrorWithCause(error.cause) ? error.cause : undefined;\n      this.props.onError(\n        // @ts-expect-error We're casting from unknown bridge types to TS unions, I expect it to hopefully work\n        new CameraRuntimeError(error.code, error.message, cause),\n      );\n    }\n  }\n\n  private onInitialized(): void {\n    this.props.onInitialized?.();\n  }\n\n  private onFrameProcessorPerformanceSuggestionAvailable(event: NativeSyntheticEvent<FrameProcessorPerformanceSuggestion>): void {\n    if (this.props.onFrameProcessorPerformanceSuggestionAvailable != null)\n      this.props.onFrameProcessorPerformanceSuggestionAvailable(event.nativeEvent);\n  }\n  //#endregion\n\n  //#region Lifecycle\n  /** @internal */\n  private assertFrameProcessorsEnabled(): void {\n    // @ts-expect-error JSI functions aren't typed\n    if (global.setFrameProcessor == null || global.unsetFrameProcessor == null) {\n      throw new CameraRuntimeError(\n        'frame-processor/unavailable',\n        'Frame Processors are not enabled. See https://mrousavy.github.io/react-native-vision-camera/docs/guides/troubleshooting',\n      );\n    }\n  }\n\n  private setFrameProcessor(frameProcessor: (frame: Frame) => void): void {\n    this.assertFrameProcessorsEnabled();\n    // @ts-expect-error JSI functions aren't typed\n    global.setFrameProcessor(this.handle, frameProcessor);\n  }\n\n  private unsetFrameProcessor(): void {\n    this.assertFrameProcessorsEnabled();\n    // @ts-expect-error JSI functions aren't typed\n    global.unsetFrameProcessor(this.handle);\n  }\n\n  private onViewReady(): void {\n    this.isNativeViewMounted = true;\n    if (this.props.frameProcessor != null) {\n      // user passed a `frameProcessor` but we didn't set it yet because the native view was not mounted yet. set it now.\n      this.setFrameProcessor(this.props.frameProcessor);\n      this.lastFrameProcessor = this.props.frameProcessor;\n    }\n  }\n\n  /** @internal */\n  componentDidUpdate(): void {\n    if (!this.isNativeViewMounted) return;\n    const frameProcessor = this.props.frameProcessor;\n    if (frameProcessor !== this.lastFrameProcessor) {\n      // frameProcessor argument identity changed. Update native to reflect the change.\n      if (frameProcessor != null) this.setFrameProcessor(frameProcessor);\n      else this.unsetFrameProcessor();\n\n      this.lastFrameProcessor = frameProcessor;\n    }\n  }\n  //#endregion\n\n  /** @internal */\n  public render(): React.ReactNode {\n    // We remove the big `device` object from the props because we only need to pass `cameraId` to native.\n    const { device, frameProcessor, frameProcessorFps, ...props } = this.props;\n    return (\n      <NativeCameraView\n        {...props}\n        frameProcessorFps={frameProcessorFps === 'auto' ? -1 : frameProcessorFps}\n        cameraId={device.id}\n        ref={this.ref}\n        onViewReady={this.onViewReady}\n        onInitialized={this.onInitialized}\n        onError={this.onError}\n        onFrameProcessorPerformanceSuggestionAvailable={this.onFrameProcessorPerformanceSuggestionAvailable}\n        enableFrameProcessor={frameProcessor != null}\n      />\n    );\n  }\n}\n//#endregion\n\n// requireNativeComponent automatically resolves 'CameraView' to 'CameraViewManager'\nconst NativeCameraView = requireNativeComponent<NativeCameraViewProps>(\n  'CameraView',\n  // @ts-expect-error because the type declarations are kinda wrong, no?\n  Camera,\n);\n"]}